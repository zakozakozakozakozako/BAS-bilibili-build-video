name: Video Frame Color Segmentation (enhanced)

on:
  workflow_dispatch:
    inputs:
      video_file:
        description: '视频文件名（仓库根目录，或用下方artifact名称下载）'
        required: true
        default: 'input.mp4'
      artifact_name:
        description: '（可选）若视频不在仓库，填写Artifact名称以下载'
        required: false
        default: ''
      fps:
        description: '抽帧帧率'
        required: true
        default: '5'

jobs:
  process-video:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system deps (ffmpeg, potrace)
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg potrace

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install pillow numpy potrace

      - name: Install Node deps
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i; fi

      - name: (Optional) Download video artifact
        if: ${{ inputs.artifact_name != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: .

      - name: Ensure working folders
        run: |
          mkdir -p frames
          mkdir -p guanjia/converted_svgs
          mkdir -p segmented
          echo "Folders prepared."

      - name: Verify input video exists
        run: |
          test -f "${{ inputs.video_file }}" || { echo "❌ Video file ${{ inputs.video_file }} not found"; ls -la; exit 1; }
          echo "Found video: ${{ inputs.video_file }}"

      - name: Probe resolution and set env
        id: probe
        run: |
          read W H < <(ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=p=0:s=x "${{ inputs.video_file }}" | tr 'x' ' ')
          echo "W=$W" | tee -a $GITHUB_ENV
          echo "H=$H" | tee -a $GITHUB_ENV
          echo "W10=$(( W / 10 ))" | tee -a $GITHUB_ENV
          echo "H10=$(( H / 10 ))" | tee -a $GITHUB_ENV
          echo "Resolution ${W}x${H} (10% => ${W10}x${H10})"

      - name: 1) Extract frames with ffmpeg
        run: |
          rm -rf frames/*
          ffmpeg -y -i "${{ inputs.video_file }}" -vf "fps=${{ inputs.fps }}" frames/frame_%06d.png

      - name: 2) Convert frames -> SVG (Python)
        run: |
          python convert_frames_to_svg.py

      - name: 3) 批量转换 SVG（Node）
        run: |
          node 2-批量转换svg.js -d ./frames
        env:
          OUT_DIR: ${{ github.workspace }}/guanjia/converted_svgs

      - name: 4) 生成 JSON（Node）
        run: |
          node 3-批量转换json.js > guanjia/output.json
        env:
          W: ${{ env.W }}
          H: ${{ env.H }}

      - name: 5) JSON -> bas 弹幕（Node）
        run: |
          node 4-json数据转换bas弹幕.js -w $W10 -h $H10 > guanjia/bas.txt
        env:
          W: ${{ env.W }}
          H: ${{ env.H }}
          W10: ${{ env.W10 }}
          H10: ${{ env.H10 }}

      - name: 6) Archive outputs
        run: |
          zip -r guanjia_artifacts.zip guanjia || true
          zip -r segmented.zip segmented || true
          zip -r frames.zip frames || true

      - name: Upload result artifacts
        uses: actions/upload-artifact@v4
        with:
          name: segmented_output
          if-no-files-found: warn
          path: |
            guanjia_artifacts.zip
            segmented.zip
            frames.zip
            guanjia/
            segmented/
            frames/
            guanjia/output.json
            guanjia/converted_svgs/
            guanjia/bas.txt
